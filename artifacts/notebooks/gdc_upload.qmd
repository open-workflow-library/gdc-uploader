---
title: "gdc_upload - Tutorial and Documentation"
author: "GDC Uploader Team"
date: "2025-06-18"
format:
  html:
    code-fold: true
    code-tools: true
jupyter: python3
---

# gdc_upload

Upload genomic data files to the NCI Genomic Data Commons using parallel processing

**Version**: 2.0.0

## Overview

This notebook provides documentation and examples for using the
gdc_upload tool. It demonstrates:

- How to prepare input files
- How to run the tool
- How to interpret outputs
- Common use cases and troubleshooting

## Installation

### Using Docker

```bash
docker pull ghcr.io/open-workflow-library/gdc-uploader:latest
```

### Using Python Package

```bash
pip install gdc-uploader
```

## Input Requirements

This tool requires the following inputs:

- **metadata_file** (File): GDC metadata JSON file containing file UUIDs and paths
- **token_file** (File): GDC authentication token file
- **files_directory** (Directory): Directory containing the files to upload
- **thread_count** (int): Number of parallel upload threads
- **retry_count** (int): Number of retry attempts for failed uploads

## Usage Examples

### Command Line Usage

```bash
gdc-upload -m path/to/metadata_file -t path/to/token_file -j path/to/thread_count -r path/to/retry_count path/to/files_directory
```

### Python API Usage

```python
from gdc_uploader import StandardUploader
from pathlib import Path

# Initialize uploader
uploader = StandardUploader(
    metadata_file=Path("metadata.json"),
    token_file=Path("token.txt"),
    thread_count=4
)

# Discover and upload files
files = uploader.discover_files(Path("/data/files"))
results = uploader.upload_files(files)

# Generate report
report = uploader.generate_report(results)
print(report)
```

## Output Description

The tool produces the following outputs:

- **upload_report** (File): Tab-separated report of upload results
- **log_files** (File): Upload log files for debugging

## GDC Upload Tool

The primary tool for uploading genomic sequence data files (BAM, FASTQ) to the National Cancer Institute's Genomic Data Commons. This tool uses the official gdc-client with parallel processing support for efficient uploads.

## Requirements

- Valid GDC authentication token
- GDC metadata JSON with file UUIDs
- Files referenced in metadata must exist
- Internet connectivity to GDC API

## Usage Examples



## Basic Upload

```bash
gdc-upload -m metadata.json -t token.txt /data/sequencing_files/
```

## Parallel Upload with 8 Threads

```bash
gdc-upload -m metadata.json -t token.txt -j 8 /data/sequencing_files/
```

## Upload with Retries

```bash
gdc-upload -m metadata.json -t token.txt -r 5 /data/sequencing_files/
```

## File Discovery

The tool searches for files in the following order:
1. Direct path from metadata
2. Common subdirectories: `fastq/`, `uBam/`, `sequence-files/`
3. Recursive search in the provided directory

## Output Format

The upload report (`upload-report.tsv`) contains:
- File UUID
- Filename
- Upload status (SUCCESS/FAILED/NOT_FOUND)
- Number of attempts
- Error message (if failed)

## Error Handling

- Automatic retry with exponential backoff
- Detailed error logging for troubleshooting
- Partial upload recovery support
- Network interruption handling

## Performance Optimization

- Parallel uploads using GNU parallel
- Connection pooling for API calls
- Efficient file discovery algorithms
- Progress tracking with minimal overhead

## Security Considerations

- Token file should have restricted permissions (600)
- Tokens expire after 30 days
- Never commit tokens to version control
- Use environment variables for CI/CD

## Troubleshooting

### Common Issues

1. **Authentication Error**: Ensure your GDC token is valid and not expired
2. **File Not Found**: Check that file paths in metadata match actual file locations
3. **Network Issues**: Verify internet connectivity and GDC API availability

### Getting Help

For additional help:
- Check the [GDC Documentation](https://docs.gdc.cancer.gov/)
- Submit issues to the [GitHub repository](https://github.com/open-workflow-library/gdc-uploader)
