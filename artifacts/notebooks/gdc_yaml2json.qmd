---
title: "gdc_yaml2json - Tutorial and Documentation"
author: "GDC Uploader Team"
date: "2025-06-18"
format:
  html:
    code-fold: true
    code-tools: true
jupyter: python3
---

# gdc_yaml2json

Convert YAML metadata files to JSON format required by GDC

**Version**: 1.0.0

## Overview

This notebook provides documentation and examples for using the
gdc_yaml2json tool. It demonstrates:

- How to prepare input files
- How to run the tool
- How to interpret outputs
- Common use cases and troubleshooting

## Installation

### Using Docker

```bash
docker pull ghcr.io/open-workflow-library/gdc-uploader:latest
```

### Using Python Package

```bash
pip install gdc-uploader
```

## Input Requirements

This tool requires the following inputs:

- **yaml_file** (File): Input YAML metadata file
- **output_file** (string): Output JSON file path, optional

## Usage Examples

### Command Line Usage

```bash
gdc-yaml2json path/to/yaml_file -o path/to/output_file
```

### Python API Usage

```python
from gdc_uploader import StandardUploader
from pathlib import Path

# Initialize uploader
uploader = StandardUploader(
    metadata_file=Path("metadata.json"),
    token_file=Path("token.txt"),
    thread_count=4
)

# Discover and upload files
files = uploader.discover_files(Path("/data/files"))
results = uploader.upload_files(files)

# Generate report
report = uploader.generate_report(results)
print(report)
```

## Output Description

The tool produces the following outputs:

- **json_file** (File): Converted JSON metadata file

## GDC YAML to JSON Converter

Converts YAML-formatted metadata files to the JSON format required by the GDC API. This tool simplifies metadata preparation by allowing users to write metadata in the more human-friendly YAML format.

## Requirements

- Valid YAML syntax in input file
- PyYAML Python package

## Usage Examples



## Basic Conversion

```bash
gdc-yaml2json metadata.yaml -o metadata.json
```

## Output to stdout

```bash
gdc-yaml2json metadata.yaml
```

## YAML Format Example

```yaml
- id: 550e8400-e29b-41d4-a716-446655440000
  file_name: sample1.fastq.gz
  file_size: 1234567890
  md5sum: d8e8fca2dc0f896fd7cb4cb0031ba249
  project_id: TCGA-LUAD
  
- id: 550e8400-e29b-41d4-a716-446655440001
  file_name: sample2.fastq.gz
  file_size: 2345678901
  md5sum: e8f8fca2dc0f896fd7cb4cb0031ba250
  project_id: TCGA-LUAD
```

## JSON Output Format

```json
[
  {
    "id": "550e8400-e29b-41d4-a716-446655440000",
    "file_name": "sample1.fastq.gz",
    "file_size": 1234567890,
    "md5sum": "d8e8fca2dc0f896fd7cb4cb0031ba249",
    "project_id": "TCGA-LUAD"
  },
  {
    "id": "550e8400-e29b-41d4-a716-446655440001",
    "file_name": "sample2.fastq.gz",
    "file_size": 2345678901,
    "md5sum": "e8f8fca2dc0f896fd7cb4cb0031ba250",
    "project_id": "TCGA-LUAD"
  }
]
```

## Error Handling

- Validates YAML syntax before conversion
- Preserves data types (numbers, strings, booleans)
- Reports line numbers for syntax errors
- Handles special characters and Unicode

## Best Practices

- Use consistent indentation (2 or 4 spaces)
- Quote strings containing special characters
- Validate JSON output before use with GDC
- Keep metadata files in version control

## Troubleshooting

### Common Issues

1. **Authentication Error**: Ensure your GDC token is valid and not expired
2. **File Not Found**: Check that file paths in metadata match actual file locations
3. **Network Issues**: Verify internet connectivity and GDC API availability

### Getting Help

For additional help:
- Check the [GDC Documentation](https://docs.gdc.cancer.gov/)
- Submit issues to the [GitHub repository](https://github.com/open-workflow-library/gdc-uploader)
